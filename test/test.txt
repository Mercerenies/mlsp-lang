package test

import something.SomethingElse

module TestModule

include SureWhyNot hiding (Blah)

## Comment

class XYZ[$1]
  @x :: Int
  @y :: $1
  @z :: Int
end

class XYZ2[$1] (XYZ[$1])
  @something :: ($1, $1)
end

type ZYX[$1] = XYZ[List[$1]]

concept AdditiveMonoid[$]
  plus :: ($, $) -> $
end

def boringFunction(xx) :: (Int!) -> Int = begin
  c.x(1, 2, 3)
  let h = -> 1 + 1
      z = ->(r) r * r
      hh(x) = 1
      gg(y)
        (^1) -> 2
        (^2) -> 3
        (_) -> 4
      end
      abc = 2
  in g(1)(1)
  a = (1, 2, 3)
end

def doSomethingInteresting(val) = begin
  sum = val.x + val.y + val.z
  sum
end

instance AdditiveMonoid[XYZ]
  def plus(a, b) = XYZ.new doSomethingInteresting(a) + doSomethingInteresting(b), 0, 0
end

def testCases(x) :: (List[$a]) -> (List[$a], Int)
  ([]) -> ([], 1)
  ([x, xs...]) -> (xs, 1)
end

end
